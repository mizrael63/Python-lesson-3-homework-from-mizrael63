
__author__ = 'Arslanov Mikhail Vasimovich'

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

def fibonacci(n, m):
    pass
	x = 1
    y = 1
    for i in range(3, m + 1):
        y += x
        x, y = y, x
        if i >= n:
            print(x)
print(fibonacci(3, 8)

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()


def sort_to_max(origin_list):
    pass
    for i in range(len(origin_list) - 1, 0, -1):
        for n in range(i):
            if origin_list[n] > origin_list[n + 1]:
                origin_list[n], origin_list[n + 1] = origin_list[n + 1], origin_list[n]
lst =  [2, 10, -12, 2.5, 20, -11, 4, 4, 0]
sort_to_max(lst)
print(lst)	
sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

def filter_01(a, b):
    filter_011 = []
    for i in b:
        if a(i):
            filter_011.append(i)
    return filter_011
lst = [5, 14, 1, 2, 7, 19, 11]
print('List', lst)
print('My filter function:', filter_01(lambda x: x > 5, lst))


# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.
# Параллелограмм - четырехугольник, стороны которого попарно параллельны. Для определения параллельности воспользуемся
#формулой параллельности векторов x1*y2-x2*y1=0), которую внесем в функцию true_vector
#вызывать её будем в функции самого параллелограмма - определим каждую сторону как вектор путем вычитания
#координат конца из координат начала и если для каждой пары прямых будет выполняться условие параллельности
#а параллельными должны быть 2 прямые - функция вернет нам истину или ложь в случае непараллельности
def true_vector(x1, y1, x2, y2):
    return x1 * y2 - x2 * y1 == 0 #условие параллельности векторов (x1, y1) и (x2, y2)
def figure(x1, y1, x2, y2, x3, y3, x4, y4):
    return (true_vector(x2 - x1, y2 - y1, x3 - x4, y3 - y4) and true_vector(x3 - x2, y2 - y3, x4 - x1, y4 - y1)) \
        or (true_vector(x3 - x1, y3 - y1, x2 - x4, y2 - y4) and true_vector(x2 - x3, y2 - y3, x1 - x4, y1 - y4))
print(figure(10, 5, 2, 2, 4, 1, 2, 0))
print(figure(-2, -2, -2, 2, 2, 2, 2, -2))
